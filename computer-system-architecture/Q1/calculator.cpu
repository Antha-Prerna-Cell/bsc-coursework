<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED offset CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED format CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="calculator.cpu" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="unused" type="ignored" numBits="12" relativity="absolute" signed="true" offset="0" defaultValue="0" id="Field58be568b">
	</Field>
	<Field name="addr" type="required" numBits="12" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field39165e21">
	</Field>
	<Field name="op" type="required" numBits="4" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field6b7de5ce">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="E" width="1" id="module.Register167a6e84" />
	<Register name="ac " width="16" id="module.Register442a9403" />
	<Register name="ar" width="12" id="module.Register475b73eb" />
	<Register name="dr" width="16" id="module.Register45176de6" />
	<Register name="ir" width="16" id="module.Register5303a7a" />
	<Register name="pc" width="12" id="module.Register214f223f" />
	<Register name="status " width="3" id="module.Register5251672e" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="carry bit" bit="0" register="module.Register167a6e84" halt="false" id="module.ConditionBit1161fded" />
	<ConditionBit name="halt bit" bit="0" register="module.Register5251672e" halt="true" id="module.ConditionBit3865db85" />

	<!--............. rams ..........................-->
	<RAM name="main memory " length="4096" id="module.RAM11be6f3c" />

	<!--............. set ...........................-->
	<Set name="CLA" register="module.Register442a9403" start="0" numBits="16" value="0" id="microinstruction.CpusimSet1da52b3b" />
	<Set name="CLE" register="module.Register167a6e84" start="0" numBits="1" value="0" id="microinstruction.CpusimSet46b93db1" />

	<!--............. test ..........................-->
	<!-- none -->

	<!--............. increment .....................-->
	<Increment name="AR+1 -&gt; AR" register="module.Register475b73eb" delta="1" id="microinstruction.Increment527e2f47" />
	<Increment name="PC+1 -&gt;PC" register="module.Register214f223f" overflowBit="module.ConditionBit1161fded" delta="1" id="microinstruction.Increment5a5208a0" />

	<!--............. shift .........................-->
	<!-- none -->

	<!--............. logical .......................-->
	<Logical name="AND" type="AND" source1="module.Register442a9403" source2="module.Register45176de6" destination="module.Register442a9403" id="microinstruction.Logical3c8587f" />
	<Logical name="CMA" type="NOT" source1="module.Register442a9403" source2="module.Register442a9403" destination="module.Register442a9403" id="microinstruction.Logical5629fbc9" />
	<Logical name="CME" type="NOT" source1="module.Register167a6e84" source2="module.Register167a6e84" destination="module.Register167a6e84" id="microinstruction.Logical5e517550" />
	<Logical name="OR" type="OR" source1="module.Register442a9403" source2="module.Register45176de6" destination="module.Register442a9403" id="microinstruction.Logical35ed0790" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="ADD" type="ADD" source1="module.Register442a9403" source2="module.Register45176de6" destination="module.Register442a9403" overflowBit="module.ConditionBit3865db85" carryBit="module.ConditionBit1161fded" id="microinstruction.Arithmetic5c8b9a98" />
	<Arithmetic name="DIVIDE" type="DIVIDE" source1="module.Register442a9403" source2="module.Register45176de6" destination="module.Register442a9403" overflowBit="module.ConditionBit3865db85" carryBit="module.ConditionBit1161fded" id="microinstruction.Arithmetic5152a09f" />
	<Arithmetic name="MULTIPLY" type="MULTIPLY" source1="module.Register442a9403" source2="module.Register45176de6" destination="module.Register442a9403" overflowBit="module.ConditionBit3865db85" carryBit="module.ConditionBit1161fded" id="microinstruction.Arithmetic7af506f" />
	<Arithmetic name="SUBTRACT" type="SUBTRACT" source1="module.Register442a9403" source2="module.Register45176de6" destination="module.Register442a9403" overflowBit="module.ConditionBit3865db85" carryBit="module.ConditionBit1161fded" id="microinstruction.Arithmetic6c9ab5a" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="ac-&gt;dr" source="module.Register442a9403" srcStartBit="0" dest="module.Register45176de6" destStartBit="0" numBits="0" id="microinstruction.TransferRtoR38ee79e5" />
	<TransferRtoR name="ar-&gt;pc" source="module.Register475b73eb" srcStartBit="0" dest="module.Register214f223f" destStartBit="0" numBits="0" id="microinstruction.TransferRtoR3084c696" />
	<TransferRtoR name="dr-&gt;ac" source="module.Register45176de6" srcStartBit="0" dest="module.Register442a9403" destStartBit="0" numBits="0" id="microinstruction.TransferRtoR5d09babc" />
	<TransferRtoR name="dr-&gt;ir" source="module.Register45176de6" srcStartBit="0" dest="module.Register5303a7a" destStartBit="0" numBits="0" id="microinstruction.TransferRtoR29c2bc5c" />
	<TransferRtoR name="ir (4-15)-&gt;pc" source="module.Register5303a7a" srcStartBit="4" dest="module.Register214f223f" destStartBit="0" numBits="0" id="microinstruction.TransferRtoR2fdc516f" />
	<TransferRtoR name="ir(4-15)  -&gt;ar" source="module.Register5303a7a" srcStartBit="4" dest="module.Register475b73eb" destStartBit="0" numBits="0" id="microinstruction.TransferRtoR296666f5" />
	<TransferRtoR name="pc -&gt;dr" source="module.Register214f223f" srcStartBit="0" dest="module.Register45176de6" destStartBit="4" numBits="0" id="microinstruction.TransferRtoR1f1740f" />
	<TransferRtoR name="pc-&gt;ar" source="module.Register214f223f" srcStartBit="0" dest="module.Register475b73eb" destStartBit="0" numBits="0" id="microinstruction.TransferRtoR12fa85c8" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="Decode" ir="module.Register5303a7a" id="microinstruction.Decode6b44e406" />

	<!--............. set condition bit .............-->
	<SetCondBit name="set carry bit " bit="module.ConditionBit1161fded" value="0" id="microinstruction.SetCondBit77d67cee" />
	<SetCondBit name="set halt bit" bit="module.ConditionBit3865db85" value="0" id="microinstruction.SetCondBit22a42ab9" />

	<!--............. io ............................-->
	<IO name="ac -&gt; output" direction="output" type="integer" buffer="module.Register442a9403" connection="[console]" id="microinstruction.IO65642eab" />
	<IO name="input -&gt; ac" direction="input" type="integer" buffer="module.Register442a9403" connection="[console]" id="microinstruction.IO1434108e" />

	<!--............. memory access .................-->
	<MemoryAccess name="dr -&gt; m[ar]" direction="write" memory="module.RAM11be6f3c" data="module.Register45176de6" address="module.Register475b73eb" id="microinstruction.MemoryAccesse865388" />
	<MemoryAccess name="m[ar] -&gt; dr" direction="read" memory="module.RAM11be6f3c" data="module.Register45176de6" address="module.Register475b73eb" id="microinstruction.MemoryAccess14d60d2b" />

	<!--............. end ...........................-->
	<End id="microinstruction.End70fa8cbc" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="microinstruction.TransferRtoR12fa85c8" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.TransferRtoR29c2bc5c" />
		<Microinstruction microRef="microinstruction.Increment5a5208a0" />
		<Microinstruction microRef="microinstruction.Decode6b44e406" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="CME" opcode="f" format="op addr" >
		<Microinstruction microRef="microinstruction.Logical5e517550" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="e" format="op unused" >
		<Microinstruction microRef="microinstruction.SetCondBit22a42ab9" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="d" format="op addr" >
		<Microinstruction microRef="microinstruction.Logical5629fbc9" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="c" format="op addr" >
		<Microinstruction microRef="microinstruction.CpusimSet1da52b3b" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="write" opcode="9" format="op unused" >
		<Microinstruction microRef="microinstruction.IO65642eab" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="read" opcode="6" format="op unused" >
		<Microinstruction microRef="microinstruction.IO1434108e" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="store" opcode="7" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.TransferRtoR38ee79e5" />
		<Microinstruction microRef="microinstruction.MemoryAccesse865388" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="load" opcode="8" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.TransferRtoR5d09babc" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="OR" opcode="5" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.Logical35ed0790" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="4" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.Logical3c8587f" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="divide" opcode="3" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.Arithmetic5152a09f" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="multiply" opcode="2" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.Arithmetic7af506f" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="subtract" opcode="1" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.Arithmetic6c9ab5a" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<MachineInstruction name="add" opcode="0" format="op addr" >
		<Microinstruction microRef="microinstruction.TransferRtoR296666f5" />
		<Microinstruction microRef="microinstruction.MemoryAccess14d60d2b" />
		<Microinstruction microRef="microinstruction.Arithmetic5c8b9a98" />
		<Microinstruction microRef="microinstruction.End70fa8cbc" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="module.RAM11be6f3c" startingAddress="0" />

	<!--............. module window info ............-->
	<ModuleWindowsInfo>
		<RAMWindowInfo ram="module.RAM11be6f3c" cellSize="2" contentsbase="Binary" addressbase="Binary" 
			top="26" left="943" width="518" height="450" />
		<RegisterWindowInfo base="Binary" 
			top="79" left="551" width="332" height="262" />
	</ModuleWindowsInfo>

</Machine>
